{"version":"0.0.1","type":"application/json","title":"$:/plugins/Gk0Wk/page-toc","plugin-type":"plugin","name":"Page TOC","list":"readme","description":"Use tiddler's H1~H6 headers to generate navigable TOC for tiddler","author":"Gk0Wk","source":"https://github.com/Gk0Wk/TiddlySeq/tree/master/plugins/Gk0Wk/page-toc","dependents":"","text":"{\"tiddlers\":{\"$:/plugins/Gk0Wk/page-toc/CurrentTiddlerTOC\":{\"title\":\"$:/plugins/Gk0Wk/page-toc/CurrentTiddlerTOC\",\"text\":\"<$list filter=\\\"[[$:/temp/focussedTiddler]is[tiddler]get[text]]\\\" variable=\\\"tiddler\\\">\\n\\nTOC of <$text text=<<tiddler>>/>:\\n<$page-toc tiddler=<<tiddler>> emptyMessage=\\\"Empty TOC\\\"/>\\n\\n</$list>\\n\"},\"$:/plugins/Gk0Wk/page-toc/PageTOCButton\":{\"title\":\"$:/plugins/Gk0Wk/page-toc/PageTOCButton\",\"list-after\":\"$:/core/ui/Buttons/info\",\"tags\":\"$:/tags/ViewToolbar\",\"caption\":\"{{$:/core/images/list-bullet}} {{$:/plugins/Gk0Wk/page-toc/PageTOCButton!!hint}}\",\"description\":\"Show TOC of this tiddler\",\"hint\":\"Page TOC\",\"text\":\"\\\\whitespace trim\\n<$set value={{{ [<currentTiddler>addprefix[$:/temp/Gk0Wk/page-toc/PageTOCButton/]] }}} name=\\\"stateTiddler\\\">\\n<$button popup=<<stateTiddler>> tooltip={{$:/plugins/Gk0Wk/page-toc/PageTOCButton!!description}} aria-label={{$:/plugins/Gk0Wk/page-toc/PageTOCButton!!hint}} class=<<tv-config-toolbar-class>>>\\n<$list filter=\\\"[<tv-config-toolbar-icons>match[yes]]\\\">\\n{{$:/core/images/list-bullet}}\\n</$list>\\n<$list filter=\\\"[<tv-config-toolbar-text>match[yes]]\\\">\\n<span class=\\\"tc-btn-text\\\">\\n{{$:/plugins/Gk0Wk/page-toc/PageTOCButton!!hint}}\\n</span>\\n</$list>\\n</$button>\\n<$reveal type=\\\"popup\\\" state=<<stateTiddler>> position=\\\"belowleft\\\" tag=\\\"div\\\" class=\\\"tc-popup-keep\\\">\\n<$page-toc tiddler=<<currentTiddler>> emptyMessage=\\\"Empty TOC\\\" class=\\\"gk0wk-tiddlertoc-viewbuttonpopup\\\" headerClassPrefix=\\\"gk0wk-tiddlertoc-viewbuttonpopup-\\\" />\\n</$reveal>\\n</$set>\\n\"},\"$:/plugins/Gk0Wk/page-toc/PageTOCWidget.js\":{\"title\":\"$:/plugins/Gk0Wk/page-toc/PageTOCWidget.js\",\"text\":\"(function() {\\n    \\\"use strict\\\";\\n    var Widget = require(\\\"$:/core/modules/widgets/widget.js\\\").widget;\\n    var PageTOCWidget = function(parseTreeNode, options) {\\n        this.initialise(parseTreeNode, options);\\n    };\\n\\n    function getTOCInfo(tiddler) {\\n        // Check empty\\n        if (tiddler === \\\"\\\") return undefined;\\n        var currentTiddler = $tw.wiki.getTiddler(tiddler);\\n        if (!currentTiddler) return undefined;\\n        var type = currentTiddler.fields.type;\\n        if (type && type !== \\\"\\\" && type !== \\\"text/vnd.tiddlywiki\\\" && type !== \\\"text/x-markdown\\\") return undefined;\\n        var headers = [];\\n        var headersCount = {\\n            'h1': 0,\\n            'h2': 0,\\n            'h3': 0,\\n            'h4': 0,\\n            'h5': 0,\\n            'h6': 0,\\n        };\\n        var root = $tw.wiki.parseTiddler(tiddler).tree;\\n        while (['set', 'importvariables'].indexOf(root[0]) > -1) root = root[0].children;\\n        $tw.utils.each(root, function(node) {\\n            if (node.type !== \\\"element\\\") return;\\n            if (!/^h[1-6]$/.test(node.tag)) return;\\n            var children = node.children;\\n            if (!children || children.length == 0) return;\\n            var text = [];\\n            for (var i = 0, len = children.length; i < len; i++) {\\n                try {\\n                    var child = children[i];\\n                    switch (child.type) {\\n                        case 'text':\\n                            text.push(child.text);\\n                            break;\\n                        case 'link':\\n                            text.push(child.children.length > 0 ? child.children[0].text : child.to.value);\\n                            break;\\n                        case 'element':\\n                            switch (child.tag) {\\n                                case 'code':\\n                                    text.push(child.children.length > 0 ? child.children[0].text : '');\\n                                    break;\\n                            }\\n                            break;\\n                    }\\n                } catch (e) {\\n                    console.error(e);\\n                }\\n            }\\n            headers.push({\\n                tag: node.tag,\\n                count: headersCount[node.tag]++,\\n                text: text.join(''),\\n            });\\n        });\\n        return {\\n            title: tiddler,\\n            headers: headers,\\n        };\\n    }\\n    PageTOCWidget.prototype = new Widget();\\n    PageTOCWidget.prototype.render = function(parent, nextSibling) {\\n        this.parentDomNode = parent;\\n        this.computeAttributes();\\n        this.execute();\\n        this.makeRender(parent, nextSibling);\\n        this.renderChildren(parent, nextSibling);\\n    };\\n    PageTOCWidget.prototype.execute = function() {\\n        // Get our parameters\\n        this.tocTitle = this.getAttribute(\\\"tiddler\\\", this.getVariable(\\\"currentTiddler\\\"));\\n        this.tocNodeTag = this.getAttribute(\\\"tag\\\", \\\"div\\\");\\n        if ($tw && $tw.config && $tw.config.htmlUnsafeElements && $tw.config.htmlUnsafeElements.indexOf(this.tocNodeTag) !== -1) this.tocNodeTag = 'div';\\n        this.tocHeaderNodeTag = this.getAttribute(\\\"headerTag\\\", \\\"p\\\");\\n        if ($tw && $tw.config && $tw.config.htmlUnsafeElements && $tw.config.htmlUnsafeElements.indexOf(this.tocHeaderNodeTag) !== -1) this.tocHeaderNodeTag = 'p';\\n        this.tocNodeClass = this.getAttribute(\\\"class\\\", \\\"gk0wk-tiddlertoc-container\\\");\\n        this.tocHeaderNodeClassPrefix = this.getAttribute(\\\"headerClassPrefix\\\", \\\"gk0wk-tiddlertoc-\\\");\\n        this.emptyMessage = this.getAttribute(\\\"emptyMessage\\\", \\\"\\\");\\n        var info = this.wiki.getTextReferenceParserInfo(this.tocTitle, 'text', '', {});\\n        this.sourceText = info.sourceText;\\n        this.parserType = info.parserType;\\n    };\\n\\n    PageTOCWidget.prototype.parserNeedsRefresh = function() {\\n        var parserInfo = this.wiki.getTextReferenceParserInfo(this.tocTitle, 'text', '', {});\\n        return (this.sourceText === undefined || parserInfo.sourceText !== this.sourceText || this.parserType === undefined || parserInfo.parserType !== this.parserType);\\n    };\\n    PageTOCWidget.prototype.refresh = function(changedTiddlers) {\\n        var changedAttributes = this.computeAttributes();\\n        if (($tw.utils.count(changedAttributes) > 0) || (changedTiddlers[this.tocTitle] && this.parserNeedsRefresh())) {\\n            this.refreshSelf();\\n            return true;\\n        } else {\\n            return this.refreshChildren(changedTiddlers);\\n        }\\n    };\\n\\n    PageTOCWidget.prototype.makeRender = function(parent, nextSibling) {\\n        if (this.domNode && parent.contains && parent.contains(this.domNode)) {\\n            parent.removeChild(this.domNode);\\n        }\\n        var tocNode = this.document.createElement(this.tocNodeTag);\\n        this.domNode = tocNode;\\n        tocNode.className = this.tocNodeClass;\\n        try {\\n            var toc = getTOCInfo(this.tocTitle);\\n            var headerNode;\\n            if (toc === undefined || toc.headers.length === 0) {\\n                headerNode = document.createElement(this.tocHeaderNodeTag);\\n                headerNode.className = this.tocHeaderNodeClassPrefix + 'empty';\\n                headerNode.innerText = this.emptyMessage;\\n                tocNode.appendChild(headerNode);\\n            } else {\\n                for (var i = 0, len = toc.headers.length; i < len; i++) {\\n                    var header = toc.headers[i];\\n                    headerNode = this.document.createElement(this.tocHeaderNodeTag);\\n                    headerNode.className = this.tocHeaderNodeClassPrefix + header.tag;\\n                    headerNode.innerText = header.text;\\n                    if (headerNode.setAttribute && headerNode.addEventListener) {\\n                        headerNode.setAttribute('index', i.toString());\\n                        headerNode.addEventListener('click', function() {\\n                            try {\\n                                var tiddlerFrameNode = document.querySelector('.tc-tiddler-frame[data-tiddler-title=\\\"' + toc.title + '\\\"]');\\n                                if (tiddlerFrameNode === undefined) return;\\n                                var headerInfo = toc.headers[parseInt(this.getAttribute(\\\"index\\\"))];\\n                                if (headerInfo === undefined) return;\\n                                var _headerNode = tiddlerFrameNode.querySelectorAll('.tc-tiddler-body > ' + headerInfo.tag)[headerInfo.count];\\n                                if (_headerNode === undefined) return;\\n                                _headerNode.scrollIntoView({\\n                                    behavior: 'smooth',\\n                                    block: 'center',\\n                                });\\n                            } catch (e) {\\n                                console.error(e);\\n                            }\\n                        });\\n                    }\\n                    tocNode.appendChild(headerNode);\\n                }\\n            }\\n        } catch (e) {\\n            console.error(e);\\n            tocNode.innerText = String(e);\\n        }\\n        parent.insertBefore(tocNode, nextSibling);\\n    };\\n    exports['page-toc'] = PageTOCWidget;\\n})();\\n\",\"type\":\"application/javascript\",\"module-type\":\"widget\"},\"$:/plugins/Gk0Wk/page-toc/readme\":{\"title\":\"$:/plugins/Gk0Wk/page-toc/readme\",\"text\":\"<$list filter=\\\"[[$:/language]get[text]removeprefix[$:/languages/]else[en-GB]]\\\" variable=\\\"lang\\\">\\n<$list filter=\\\"[<lang>search[zh]]\\\">\\n\\n利用条目的H1~H6标题为条目生成可导航的目录。没错，就是对单个条目生成的标题目录。而且目录是点击可导航的，就是说会滚动到标题所在的位置！\\n\\n虽然TiddlyWiki的组织逻辑不推荐编写过长的条目，但总会有碰到阅读长条目的时候。相信所有有类似经历的用户都曾想过：如果能为单个长条目生成阅读目录就好了，毕竟迷失在长文中是一件很痛苦的事情。我也是这其中的一员。\\n\\n本插件提供了一个能够对某个条目生成目录的空间`<$page-toc>`，参数如下：\\n\\n|!参数 |!解释 |\\n|tiddler |要生成目录的条目的标题，默认是当前条目(`currentTiddler`) |\\n|tag |为目录外层容器提供一个可选的HTML标签，用于代替默认的`div` |\\n|headerTag |为目录内层标题提供一个可选的HTML标签，用于代替默认的`p` |\\n|class |为目录外层容器指定类名，默认是`gk0wk-tiddlertoc-container` |\\n|headerClassPrefix |为目录内层标题指定类前缀(后面是`h1`~`h6`或`empty`)，默认是`gk0wk-tiddlertoc-` |\\n|emptyMessage |目录为空、条目不存在或者条目不是文章时显示的文字 |\\n\\n例如：\\n\\n```\\n<$page-toc tiddler=<<currentTiddler>> emptyMessage=\\\"Empty TOC\\\"/>\\n```\\n\\n同时，我利用这个控件编写了两个小的组件，可以直接使用这两个组件，也可以学习这两个组件的用法做自己的DIY：\\n\\n* [[CurrentTiddlerTOC|$:/plugins/Gk0Wk/page-toc/CurrentTiddlerTOC]] 可以显示当前所阅读的条目的名称并生成目录，但是需要[[Hotzone插件|https://tw-cpl.netlify.app/#felixhayashi%2Fhotzone]]的支持。\\n* [[PageTOCButton|$:/plugins/Gk0Wk/page-toc/PageTOCButton]] 为每个条目的工具栏增加以一个 {{$:/core/images/list-bullet}} 按钮，点击即可显示目录。\\n\\n如有任何使用问题，欢迎向我提[[Issue|https://github.com/Gk0Wk/TiddlySeq/issues]]！\\n\\n</$list>\\n\\n<$list filter=\\\"[<lang>!search[zh]]\\\">\\n\\nGenerate a navigable table of contents for tiddlers using the H1~H6 headings of the tiddlers. That's right, it's a headline table of contents generated for a single tiddler. And the table of contents is navigable by clicking on it, meaning it will scroll to where the title is!\\n\\nAlthough TiddlyWiki's organizational logic does not recommend writing excessively long tiddlers, there will always be times when you read long tiddlers. I'm sure all users who have had similar experiences have wondered if it would be nice to have a table of contents for individual long tiddlers, after all, it's a pain to get lost in long articles. I am also one of them.\\n\\nThis plugin provides a widget `<$page-toc>` that can generate a table of contents for a tiddler with the following parameters.\\n\\n|!Attribute |!Description |\\n|tiddler |Title of the tiddler to generate the TOC, default is the current tiddler (`currentTiddler`) |\\n|tag |Provide an optional HTML tag for the outer container of the TOC to replace the default `div` |\\n|headerTag |Provide an optional HTML tag for the inner TOC header to replace the default `p` |\\n|class |Specify the class name for the outer container of the TOC, the default is `gk0wk-tiddlertoc-container` |\\n|headerClassPrefix |Specify the class prefix (followed by `h1`~`h6` or `empty`) for the TOC inner level title, default is `gk0wk-tiddlertoc-` |\\n|emptyMessage |The text displayed when the table of contents is empty, the tiddler does not exist, or the tiddler is not an article |\\n\\nFor instance:\\n\\n```\\n<$page-toc tiddler=<<currentTiddler>> emptyMessage=\\\"Empty TOC\\\"/>\\n```\\n\\nAt the same time, I have written two small components using this widget, which can be used directly or you can learn the usage of these two components to do your own DIY:\\n\\n* [[CurrentTiddlerTOC|$:/plugins/Gk0Wk/page-toc/CurrentTiddlerTOC]] You can display the name of the currently read entry and generate a table of contents, but it requires the support of [[Hotzone Plugin|https://tw-cpl.netlify.app/#felixhayashi%2Fhotzone]].\\n* [[PageTOCButton|$:/plugins/Gk0Wk/page-toc/PageTOCButton]] Add a {{$:/core/images/list-bullet}} button to the toolbar for each entry and click it to display the table of contents.\\n\\nFeel free to make me an [[Issue|https://github.com/Gk0Wk/TiddlySeq/issues]] if you have any usage problems!\\n\\n</$list>\\n</$list>\\n\"},\"$:/plugins/Gk0Wk/page-toc/style.css\":{\"title\":\"$:/plugins/Gk0Wk/page-toc/style.css\",\"text\":\".gk0wk-tiddlertoc-h1 {\\n  padding-left: 0;\\n}\\n.gk0wk-tiddlertoc-h2 {\\n  padding-left: 1em;\\n}\\n.gk0wk-tiddlertoc-h3 {\\n  padding-left: 2em;\\n}\\n.gk0wk-tiddlertoc-h4 {\\n  padding-left: 3em;\\n}\\n.gk0wk-tiddlertoc-h5 {\\n  padding-left: 4em;\\n}\\n.gk0wk-tiddlertoc-h6 {\\n  padding-left: 5em;\\n}\\n\\n.gk0wk-tiddlertoc-empty {\\n  color: <<colour very-muted-foreground>>;\\n  user-select: none;\\n}\\n\\n.gk0wk-tiddlertoc-h1,\\n.gk0wk-tiddlertoc-h2,\\n.gk0wk-tiddlertoc-h3,\\n.gk0wk-tiddlertoc-h4,\\n.gk0wk-tiddlertoc-h5,\\n.gk0wk-tiddlertoc-h6 {\\n  user-select: none;\\n  cursor: pointer;\\n  transition: all {{$:/config/AnimationDuration}}ms;\\n}\\n\\n.gk0wk-tiddlertoc-h1:hover,\\n.gk0wk-tiddlertoc-h2:hover,\\n.gk0wk-tiddlertoc-h3:hover,\\n.gk0wk-tiddlertoc-h4:hover,\\n.gk0wk-tiddlertoc-h5:hover,\\n.gk0wk-tiddlertoc-h6:hover {\\n  color: <<colour foreground>>;\\n}\\n\\n.gk0wk-tiddlertoc-viewbuttonpopup {\\n  border-radius: 3px;\\n  background: <<colour page-background>>;\\n  width: min(90vw, 300px);\\n  <<box-shadow \\\"#00000070 0 2px 6px\\\">>\\n  filter: contrast(90%);\\n  padding: 0;\\n}\\n\\n.gk0wk-tiddlertoc-viewbuttonpopup-h1 {\\n  padding-left: 16px;\\n}\\n\\n.gk0wk-tiddlertoc-viewbuttonpopup-h2 {\\n  padding-left: calc(16px + 1em);\\n}\\n\\n.gk0wk-tiddlertoc-viewbuttonpopup-h3 {\\n  padding-left: calc(16px + 2em);\\n}\\n\\n.gk0wk-tiddlertoc-viewbuttonpopup-h4 {\\n  padding-left: calc(16px + 3em);\\n}\\n\\n.gk0wk-tiddlertoc-viewbuttonpopup-h5 {\\n  padding-left: calc(16px + 4em);\\n}\\n\\n.gk0wk-tiddlertoc-viewbuttonpopup-h6 {\\n  padding-left: calc(16px + 5em);\\n}\\n\\n.gk0wk-tiddlertoc-viewbuttonpopup-empty {\\n  color: <<colour very-muted-foreground>>;\\n  user-select: none;\\n  font-size: 24px;\\n  line-height: 1em;\\n  padding: 20px;\\n  text-align: center;\\n  margin: 0 !important;\\n}\\n\\n.gk0wk-tiddlertoc-viewbuttonpopup-h1,\\n.gk0wk-tiddlertoc-viewbuttonpopup-h2,\\n.gk0wk-tiddlertoc-viewbuttonpopup-h3,\\n.gk0wk-tiddlertoc-viewbuttonpopup-h4,\\n.gk0wk-tiddlertoc-viewbuttonpopup-h5,\\n.gk0wk-tiddlertoc-viewbuttonpopup-h6 {\\n  font-size: 16px;\\n  font-weight: 700;\\n  line-height: 1em;\\n  margin: 0 !important;\\n  padding-top: 10px;\\n  padding-bottom: 10px;\\n  padding-right: 6px;\\n  user-select: none;\\n  cursor: pointer;\\n  background: transparent;\\n  opacity: 0.7;\\n  white-space: nowrap;\\n  text-overflow: ellipsis;\\n  overflow: hidden;\\n  transition: all {{$:/config/AnimationDuration}}ms;\\n}\\n\\n.gk0wk-tiddlertoc-viewbuttonpopup-h1:hover,\\n.gk0wk-tiddlertoc-viewbuttonpopup-h2:hover,\\n.gk0wk-tiddlertoc-viewbuttonpopup-h3:hover,\\n.gk0wk-tiddlertoc-viewbuttonpopup-h4:hover,\\n.gk0wk-tiddlertoc-viewbuttonpopup-h5:hover,\\n.gk0wk-tiddlertoc-viewbuttonpopup-h6:hover {\\n  opacity: 1;\\n  background: <<colour background>>;\\n  color: <<colour foreground>>;\\n}\\n\",\"tags\":\"$:/tags/Stylesheet\",\"type\":\"text/vnd.tiddlywiki\"}}}"}