{"version":"0.0.1","type":"application/json","title":"$:/plugins/Gk0Wk/page-toc","plugin-type":"plugin","name":"Page TOC","list":"readme","description":"Use tiddler's H1~H6 headers to generate navigable TOC for tiddler","author":"Gk0Wk","source":"https://github.com/Gk0Wk/TiddlySeq/tree/master/plugins/Gk0Wk/page-toc","dependents":"","text":"{\"tiddlers\":{\"$:/plugins/Gk0Wk/page-toc/CurrentTiddlerTOC\":{\"title\":\"$:/plugins/Gk0Wk/page-toc/CurrentTiddlerTOC\",\"text\":\"<$list filter=\\\"[[$:/temp/focussedTiddler]is[tiddler]get[text]]\\\" variable=\\\"tiddler\\\">\\n\\nTOC of <$text text=<<tiddler>>/>:\\n<$page-toc tiddler=<<tiddler>> emptyMessage=\\\"empty TOC\\\"/>\\n\\n</$list>\\n\"},\"$:/plugins/Gk0Wk/page-toc/PageTOCButton\":{\"title\":\"$:/plugins/Gk0Wk/page-toc/PageTOCButton\",\"tags\":\"$:/tags/PageControls\",\"caption\":\"{{$:/core/images/list-bullet}} {{$:/plugins/Gk0Wk/page-toc/PageTOCButton!!hint}}\",\"description\":\"Show TOC of this tiddler\",\"hint\":\"Page TOC\",\"text\":\"\\\\whitespace trim\\n<$set value={{{ [<currentTiddler>addprefix[$:/temp/Gk0Wk/page-toc/PageTOCButton/]] }}} name=\\\"stateTiddler\\\">\\n<$button popup=<<stateTiddler>> tooltip={{$:/plugins/Gk0Wk/page-toc/PageTOCButton!!description}} aria-label={{$:/plugins/Gk0Wk/page-toc/PageTOCButton!!hint}} class=<<tv-config-toolbar-class>>>\\n<$list filter=\\\"[<tv-config-toolbar-icons>match[yes]]\\\">\\n{{$:/core/images/list-bullet}}\\n</$list>\\n<$list filter=\\\"[<tv-config-toolbar-text>match[yes]]\\\">\\n<span class=\\\"tc-btn-text\\\">\\n{{$:/plugins/Gk0Wk/page-toc/PageTOCButton!!hint}}\\n</span>\\n</$list>\\n</$button>\\n</$set>\\n\\n<$reveal type=\\\"popup\\\" state=<<stateTiddler2>> position=\\\"belowleft\\\" tag=\\\"div\\\" class=\\\"tc-popup-keep\\\">\\n<$page-toc tiddler=<<currentTiddler>> emptyMessage=\\\"empty TOC\\\"/>\\n</$reveal>\\n\"},\"$:/plugins/Gk0Wk/page-toc/PageTOCWidget.js\":{\"title\":\"$:/plugins/Gk0Wk/page-toc/PageTOCWidget.js\",\"text\":\"(function() {\\n    \\\"use strict\\\";\\n    var Widget = require(\\\"$:/core/modules/widgets/widget.js\\\").widget;\\n    var PageTOCWidget = function(parseTreeNode, options) {\\n        this.initialise(parseTreeNode, options);\\n    };\\n\\n    function getTOCInfo(tiddler) {\\n        // Check empty\\n        if (tiddler === \\\"\\\") return undefined;\\n        var currentTiddler = $tw.wiki.getTiddler(tiddler);\\n        if (!currentTiddler) return undefined;\\n        var type = currentTiddler.fields.type;\\n        if (type && type !== \\\"\\\" && type !== \\\"text/vnd.tiddlywiki\\\" && type !== \\\"text/x-markdown\\\") return undefined;\\n        var headers = [];\\n        var headersCount = {\\n            'h1': 0,\\n            'h2': 0,\\n            'h3': 0,\\n            'h4': 0,\\n            'h5': 0,\\n            'h6': 0,\\n        };\\n        $tw.utils.each($tw.wiki.parseTiddler(tiddler).tree, function(node) {\\n            if (node.type !== \\\"element\\\") return;\\n            if (!/^h[1-6]$/.test(node.tag)) return;\\n            var children = node.children;\\n            if (!children || children.length == 0) return;\\n            var text = [];\\n            for (var i = 0, len = children.length; i < len; i++) {\\n                try {\\n                    var child = children[i];\\n                    switch (child.type) {\\n                        case 'text':\\n                            text.push(child.text);\\n                            break;\\n                        case 'link':\\n                            text.push(child.children.length > 0 ? child.children[0].text : child.to.value);\\n                            break;\\n                    }\\n                } catch (e) {\\n                    console.error(e);\\n                }\\n            }\\n            headers.push({\\n                tag: node.tag,\\n                count: headersCount[node.tag]++,\\n                text: text.join(''),\\n            });\\n        });\\n        return {\\n            title: tiddler,\\n            headers: headers,\\n        };\\n    }\\n    PageTOCWidget.prototype = new Widget();\\n    PageTOCWidget.prototype.render = function(parent, nextSibling) {\\n        this.parentDomNode = parent;\\n        this.computeAttributes();\\n        this.execute();\\n        this.makeRender(parent, nextSibling);\\n        this.renderChildren(parent, nextSibling);\\n    };\\n    PageTOCWidget.prototype.execute = function() {\\n        // Get our parameters\\n        this.tocTitle = this.getAttribute(\\\"tiddler\\\", this.getVariable(\\\"currentTiddler\\\"));\\n        this.tocNodeTag = this.getAttribute(\\\"tag\\\", \\\"div\\\");\\n        if ($tw && $tw.config && $tw.config.htmlUnsafeElements && $tw.config.htmlUnsafeElements.indexOf(this.tocNodeTag) !== -1) this.tocNodeTag = 'div';\\n        this.tocHeaderNodeTag = this.getAttribute(\\\"headerTag\\\", \\\"p\\\");\\n        if ($tw && $tw.config && $tw.config.htmlUnsafeElements && $tw.config.htmlUnsafeElements.indexOf(this.tocHeaderNodeTag) !== -1) this.tocHeaderNodeTag = 'p';\\n        this.tocNodeClass = this.getAttribute(\\\"class\\\", \\\"gk0wk-tiddlertoc-container\\\");\\n        this.tocHeaderNodeClassPrefix = this.getAttribute(\\\"headerClassPrefix\\\", \\\"gk0wk-tiddlertoc-\\\");\\n        this.emptyMessage = this.getAttribute(\\\"emptyMessage\\\", \\\"\\\");\\n        var info = this.wiki.getTextReferenceParserInfo(this.tocTitle, 'text', '', {});\\n        this.sourceText = info.sourceText;\\n        this.parserType = info.parserType;\\n    };\\n\\n    PageTOCWidget.prototype.parserNeedsRefresh = function() {\\n        var parserInfo = this.wiki.getTextReferenceParserInfo(this.tocTitle, 'text', '', {});\\n        return (this.sourceText === undefined || parserInfo.sourceText !== this.sourceText || this.parserType === undefined || parserInfo.parserType !== this.parserType);\\n    };\\n    PageTOCWidget.prototype.refresh = function(changedTiddlers) {\\n        var changedAttributes = this.computeAttributes();\\n        if (($tw.utils.count(changedAttributes) > 0) || (changedTiddlers[this.tocTitle] && this.parserNeedsRefresh())) {\\n            this.refreshSelf();\\n            return true;\\n        } else {\\n            return this.refreshChildren(changedTiddlers);\\n        }\\n    };\\n\\n    PageTOCWidget.prototype.makeRender = function(parent, nextSibling) {\\n        if (this.domNode && parent.contains && parent.contains(this.domNode)) {\\n            parent.removeChild(this.domNode);\\n        }\\n        var tocNode = this.document.createElement(this.tocNodeTag);\\n        this.domNode = tocNode;\\n        tocNode.className = this.tocNodeClass;\\n        try {\\n            var toc = getTOCInfo(this.tocTitle);\\n            console.log(toc);\\n            var headerNode;\\n            if (toc === undefined || toc.headers.length === 0) {\\n                headerNode = document.createElement(this.tocHeaderNodeTag);\\n                headerNode.className = this.tocHeaderNodeClassPrefix + 'empty';\\n                headerNode.innerText = this.emptyMessage;\\n                tocNode.appendChild(headerNode);\\n            } else {\\n                for (var i = 0, len = toc.headers.length; i < len; i++) {\\n                    var header = toc.headers[i];\\n                    headerNode = this.document.createElement(this.tocHeaderNodeTag);\\n                    headerNode.className = this.tocHeaderNodeClassPrefix + header.tag;\\n                    headerNode.innerText = header.text;\\n                    if (headerNode.setAttribute && headerNode.addEventListener) {\\n                        headerNode.setAttribute('index', i.toString());\\n                        headerNode.addEventListener('click', function() {\\n                            try {\\n                                var tiddlerFrameNode = document.querySelector('.tc-tiddler-frame[data-tiddler-title=\\\"' + toc.title + '\\\"]');\\n                                if (tiddlerFrameNode === undefined) return;\\n                                var headerInfo = toc.headers[parseInt(this.getAttribute(\\\"index\\\"))];\\n                                if (headerInfo === undefined) return;\\n                                var _headerNode = tiddlerFrameNode.querySelectorAll('.tc-tiddler-body > ' + headerInfo.tag)[headerInfo.count];\\n                                if (_headerNode === undefined) return;\\n                                _headerNode.scrollIntoView({\\n                                    behavior: 'smooth',\\n                                    block: 'center',\\n                                });\\n                            } catch (e) {\\n                                console.error(e);\\n                            }\\n                        });\\n                    }\\n                    tocNode.appendChild(headerNode);\\n                }\\n            }\\n        } catch (e) {\\n            console.error(e);\\n            tocNode.innerText = String(e);\\n        }\\n        parent.insertBefore(tocNode, nextSibling);\\n    };\\n    exports['page-toc'] = PageTOCWidget;\\n})();\\n\",\"type\":\"application/javascript\",\"module-type\":\"widget\"},\"$:/plugins/Gk0Wk/sidebar-resizer/readme\":{\"title\":\"$:/plugins/Gk0Wk/sidebar-resizer/readme\",\"text\":\"\\\\define lingo-base() $:/language/ThemeTweaks/\\n\\n<$list filter=\\\"[[$:/language]get[text]removeprefix[$:/languages/]else[en-GB]]\\\" variable=\\\"lang\\\">\\n<$list filter=\\\"[<lang>search[zh]]\\\">\\n\\n会在侧边栏的左侧边缘添加一个可拖动的边框，当鼠标移动到左侧边缘时会看到这个边框。拖动这个边框可以改变侧边栏的宽度，拖动到靠近窗口右侧边缘时就会自动收起侧边栏。\\n\\n原理是更改[[$:/themes/tiddlywiki/vanilla/metrics/sidebarwidth]]的值。\\n\\n注意：首先请将 <$link to=\\\"$:/themes/tiddlywiki/vanilla/options/sidebarlayout\\\"><<lingo Options/SidebarLayout>></$link> 调整为`fluid-fixed`，本插件才可生效。\\n\\n<$button set=\\\"$:/themes/tiddlywiki/vanilla/options/sidebarlayout\\\" setTo=\\\"fluid-fixed\\\">点击设置<<lingo Options/SidebarLayout>></$button>\\n\\n</$list>\\n\\n<$list filter=\\\"[<lang>!search[zh]]\\\">\\n\\nA draggable border is added to the left edge of the sidebar, which will be visible when the mouse is moved to the left edge. Dragging this border will change the width of the sidebar, and it will automatically close the sidebar when dragged near the right edge of the window.\\n\\nThe principle is to change the value of [[$:/themes/tiddlywiki/vanilla/metrics/sidebarwidth]].\\n\\nNote: First, please adjust <$link to=\\\"$:/themes/tiddlywiki/vanilla/options/sidebarlayout\\\"><<lingo Options/SidebarLayout>></$link> to `fluid-fixed` for this plugin to take effect.\\n\\n<$button set=\\\"$:/themes/tiddlywiki/vanilla/options/sidebarlayout\\\" setTo=\\\"fluid-fixed\\\">Click to adjust<<lingo Options/SidebarLayout>></$button>\\n\\n</$list>\\n</$list>\\n\"},\"$:/plugins/Gk0Wk/page-toc/style.css\":{\"title\":\"$:/plugins/Gk0Wk/page-toc/style.css\",\"text\":\".gk0wk-tiddlertoc-h1 {\\n\\tpadding-left: 0;\\n}\\n.gk0wk-tiddlertoc-h2 {\\n\\tpadding-left: 1em;\\n}\\n.gk0wk-tiddlertoc-h3 {\\n\\tpadding-left: 2em;\\n}\\n.gk0wk-tiddlertoc-h4 {\\n\\tpadding-left: 3em;\\n}\\n.gk0wk-tiddlertoc-h5 {\\n\\tpadding-left: 4em;\\n}\\n.gk0wk-tiddlertoc-h6 {\\n\\tpadding-left: 5em;\\n}\\n\\n.gk0wk-tiddlertoc-empty {\\n\\tcolor: <<colour very-muted-foreground>>;\\n\\tuser-select: none;\\n}\\n\\n.gk0wk-tiddlertoc-h1,\\n.gk0wk-tiddlertoc-h2,\\n.gk0wk-tiddlertoc-h3,\\n.gk0wk-tiddlertoc-h4,\\n.gk0wk-tiddlertoc-h5,\\n.gk0wk-tiddlertoc-h6 {\\n\\tuser-select: none;\\n\\tcursor: pointer;\\n\\t<<transition \\\"\\\"\\\"all {{$:/config/AnimationDuration}}ms\\\"\\\"\\\">>\\n}\\n\\n.gk0wk-tiddlertoc-h1:hover,\\n.gk0wk-tiddlertoc-h2:hover,\\n.gk0wk-tiddlertoc-h3:hover,\\n.gk0wk-tiddlertoc-h4:hover,\\n.gk0wk-tiddlertoc-h5:hover,\\n.gk0wk-tiddlertoc-h6:hover {\\n\\tcolor: <<colour foreground>>;\\n}\\n\",\"tags\":\"$:/tags/Stylesheet\",\"type\":\"text/vnd.tiddlywiki\"}}}"}