{"version":"0.0.1","type":"application/json","title":"$:/plugins/Gk0Wk/the-brain","plugin-type":"plugin","name":"TheBrain","list":"readme LICENSE","description":"TheBrain-like live mind map for your wiki","author":"Gk0Wk","source":"https://github.com/Gk0Wk/TiddlySeq/tree/master/plugins/Gk0Wk/the-brain","dependents":"$:/plugins/Gk0Wk/echarts","text":"{\"tiddlers\":{\"$:/plugins/Gk0Wk/the-brain/widget.js\":{\"title\":\"$:/plugins/Gk0Wk/the-brain/widget.js\",\"text\":\"(function () {\\n  \\\"use strict\\\";\\n  var Widget = require(\\\"$:/core/modules/widgets/widget.js\\\").widget;\\n  var EchartsJS = require(\\\"$:/plugins/Gk0Wk/echarts/echarts.min.js\\\");\\n  var Categories = [\\n    {\\n      name: 'Focusing'\\n    },\\n    {\\n      name: 'History'\\n    },\\n    {\\n      name: 'Link To'\\n    },\\n    {\\n      name: 'Backlink From'\\n    },\\n    {\\n      name: 'Tag To'\\n    },\\n    {\\n      name: 'Tag By'\\n    },\\n    {\\n      name: 'Parent'\\n    },\\n  ];\\n  var TheBrainWidget = function (parseTreeNode, options) {\\n    this.initialise(parseTreeNode, options);\\n  };\\n  TheBrainWidget.prototype = new Widget();\\n  TheBrainWidget.prototype.render = function (parent, nextSibling) {\\n    this.parentDomNode = parent;\\n    this.computeAttributes();\\n    this.execute();\\n    var container = document.createElement('div');\\n    container.setAttribute('class', \\\"gk0wk-echarts-body\\\");\\n    container.style.width = this.getAttribute('width', '100%');\\n    container.style.height = this.getAttribute('height', '300px');\\n    parent.insertBefore(container, nextSibling);\\n    this.domNodes.push(container);\\n    if (this.chart) this.chart.dispose();\\n    var chart = this.chart = EchartsJS.init(container, 'dark');\\n    if (ResizeObserver) {\\n      var observer = new ResizeObserver(function (entries) {\\n        var sidebar = document.querySelector('.tc-sidebar-scrollable');\\n        var height = entries[0].contentRect.height;\\n        if (sidebar && !parent.isTiddlyWikiFakeDom && sidebar.contains(container)) {\\n          height = window.innerHeight - parent.getBoundingClientRect().top -\\n            parseInt(getComputedStyle(sidebar).paddingBottom.replace('px', ''));\\n        }\\n        chart.resize({\\n          width: entries[0].contentRect.width,\\n          height: height,\\n        });\\n      });\\n      observer.observe(container);\\n    }\\n    var historyTiddlers = [];\\n    var updateMapView = function () {\\n      var focussedTiddler = $tw.wiki.getTiddlerText('$:/temp/focussedTiddler');\\n      if (focussedTiddler && focussedTiddler.startsWith('$:/')) return;\\n      var nodes = [];\\n      var edges = [];\\n      if (focussedTiddler && focussedTiddler !== '') {\\n        var nodeMap = {};\\n\\n        // 当前关注的 Tiddler\\n        nodeMap[focussedTiddler] = true;\\n        nodes.push({\\n          name: focussedTiddler,\\n          // fixed: true,\\n          category: 0,\\n        });\\n\\n        // 历史路径\\n        var nextTiddler = focussedTiddler;\\n        var historyMap = {};\\n        for (var i = historyTiddlers.length - 2; i >= 0; i--) {\\n          var tiddlerTitle = historyTiddlers[i];\\n          if (historyMap[tiddlerTitle]) continue;\\n          if (tiddlerTitle === nextTiddler) continue;\\n          edges.push({\\n            source: tiddlerTitle,\\n            target: nextTiddler,\\n            label: {\\n              show: true,\\n              formatter: 'history'\\n            }\\n          });\\n          historyMap[tiddlerTitle] = true;\\n          nextTiddler = tiddlerTitle;\\n          if (nodeMap[tiddlerTitle]) break;\\n          nodes.push({\\n            name: tiddlerTitle,\\n            category: 1,\\n          });\\n          nodeMap[tiddlerTitle] = true;\\n        }\\n\\n        // 链接\\n        $tw.utils.each($tw.wiki.getTiddlerLinks(focussedTiddler), function (tiddlerTitle) {\\n          edges.push({\\n            source: focussedTiddler,\\n            target: tiddlerTitle,\\n            label: {\\n              show: true,\\n              formatter: 'link'\\n            }\\n          });\\n          if (nodeMap[tiddlerTitle]) return;\\n          nodes.push({\\n            name: tiddlerTitle,\\n            category: 2,\\n          });\\n          nodeMap[tiddlerTitle] = true;\\n        });\\n\\n        // 反链\\n        $tw.utils.each($tw.wiki.getTiddlerBacklinks(focussedTiddler), function (tiddlerTitle) {\\n          edges.push({\\n            source: tiddlerTitle,\\n            target: focussedTiddler,\\n            label: {\\n              show: true,\\n              formatter: 'backlink'\\n            }\\n          });\\n          if (nodeMap[tiddlerTitle]) return;\\n          nodes.push({\\n            name: tiddlerTitle,\\n            category: 3,\\n          });\\n          nodeMap[tiddlerTitle] = true;\\n        });\\n\\n        // 指向哪些tag\\n        $tw.utils.each($tw.wiki.getTiddler(focussedTiddler).fields.tags, function (tiddlerTitle) {\\n          if (!$tw.wiki.tiddlerExists(tiddlerTitle)) return;\\n          edges.push({\\n            source: focussedTiddler,\\n            target: tiddlerTitle,\\n            label: {\\n              show: true,\\n              formatter: 'tag'\\n            }\\n          });\\n          if (nodeMap[tiddlerTitle]) return;\\n          nodes.push({\\n            name: tiddlerTitle,\\n            category: 4,\\n          });\\n          nodeMap[tiddlerTitle] = true;\\n        });\\n\\n        // 被谁作为 Tag\\n        $tw.utils.each($tw.wiki.getTiddlersWithTag(focussedTiddler), function (tiddlerTitle) {\\n          edges.push({\\n            source: tiddlerTitle,\\n            target: focussedTiddler,\\n            label: {\\n              show: true,\\n              formatter: 'tag'\\n            }\\n          });\\n          if (nodeMap[tiddlerTitle]) return;\\n          nodes.push({\\n            name: tiddlerTitle,\\n            category: 5,\\n          });\\n          nodeMap[tiddlerTitle] = true;\\n        });\\n\\n        // 父条目\\n        var path = focussedTiddler.split('/');\\n        if (path.length > 1) {\\n          var parentTiddler = path.slice(0, -1).join('/');\\n          $tw.utils.each([parentTiddler, parentTiddler + '/'], function (tiddlerTitle) {\\n            edges.push({\\n              source: tiddlerTitle,\\n              target: focussedTiddler,\\n              label: {\\n                show: true,\\n                formatter: 'parent'\\n              }\\n            });\\n            if (nodeMap[tiddlerTitle]) return;\\n            nodes.push({\\n              name: tiddlerTitle,\\n              category: 6,\\n            });\\n            nodeMap[tiddlerTitle] = true;\\n          });\\n        }\\n      }\\n      var option = {\\n        tooltip: {},\\n        backgroundColor: 'transparent',\\n        legend: [\\n          {\\n            data: Categories.map(function (a) {\\n              return a.name;\\n            })\\n          }\\n        ],\\n        title: {\\n          text: 'The Brain View',\\n          show: true,\\n          top: 'bottom',\\n          left: 'right',\\n        },\\n        series: [\\n          {\\n            name: 'The Brain View',\\n            type: 'graph',\\n            layout: 'force',\\n            nodes: nodes,\\n            edges: edges,\\n            categories: Categories,\\n            roam: true,\\n            zoom: 4.0,\\n            label: {\\n              position: 'right',\\n              show: true\\n            },\\n            force: {\\n              repulsion: 50\\n            },\\n            edgeSymbol: ['circle', 'arrow'],\\n            edgeSymbolSize: [4, 10],\\n            edgeLabel: {\\n              fontSize: 5\\n            },\\n            lineStyle: {\\n              opacity: 0.9,\\n              width: 2,\\n              curveness: 0\\n            }\\n          }\\n        ]\\n      };\\n      chart.setOption(option);\\n      historyTiddlers.push(focussedTiddler);\\n      historyTiddlers.slice(-10);\\n    };\\n    // 去抖\\n    var timer;\\n    var tryUpdateMap = function () {\\n      if (timer) clearTimeout(timer);\\n      timer = setTimeout(function () {\\n        timer = undefined;\\n        updateMapView();\\n      }, $tw.utils.getAnimationDuration() + 10);\\n    };\\n    $tw.wiki.addEventListener('change', tryUpdateMap);\\n    tryUpdateMap();\\n  };\\n  TheBrainWidget.prototype.execute = function () {\\n    return;\\n  };\\n  TheBrainWidget.prototype.refresh = function () {\\n    var changedAttributes = this.computeAttributes();\\n    if (Object.keys(changedAttributes).length > 0) {\\n      this.refreshSelf();\\n      return true;\\n    } else {\\n      return false;\\n    }\\n  };\\n  exports['the-brain'] = TheBrainWidget;\\n})();\\n\",\"type\":\"application/javascript\",\"module-type\":\"widget\"},\"$:/plugins/Gk0Wk/the-brain/LICENSE\":{\"title\":\"$:/plugins/Gk0Wk/the-brain/LICENSE\",\"text\":\"MIT License\\n\\nCopyright (c) 2021 Ke Wang (Gk0Wk in GitHub)\\n\\nPermission is hereby granted, free of charge, to any person obtaining a copy\\nof this software and associated documentation files (the \\\"Software\\\"), to deal\\nin the Software without restriction, including without limitation the rights\\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\\ncopies of the Software, and to permit persons to whom the Software is\\nfurnished to do so, subject to the following conditions:\\n\\nThe above copyright notice and this permission notice shall be included in all\\ncopies or substantial portions of the Software.\\n\\nTHE SOFTWARE IS PROVIDED \\\"AS IS\\\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\\nSOFTWARE.\\n\",\"type\":\"text/plain\"},\"$:/plugins/Gk0Wk/the-brain/readme\":{\"title\":\"$:/plugins/Gk0Wk/the-brain/readme\",\"text\":\"<$list filter=\\\"[[$:/language]get[text]removeprefix[$:/languages/]else[en-GB]]\\\" variable=\\\"lang\\\">\\n<$list filter=\\\"[<lang>search[zh]]\\\">\\n\\n还没写\\n\\n</$list>\\n\\n<$list filter=\\\"[<lang>!search[zh]]\\\">\\n\\nEmpty\\n\\n</$list>\\n</$list>\\n\"}}}"}